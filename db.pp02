exec { "apt-update":
  command => "/usr/bin/apt-get update"
}

#require -> define uma dependencia. Ou seja, executa primeiro apt-update para depois esete comando
package { "mysql-server":
  ensure => installed,
  require => Exec["apt-update"],
}

#notiy -> outro tipo de dependencia: sempre que file for alterado, ele executa Service mysql
#content -> conteudo que ficara no arquivo. Se for grande usar template Ruby
file { "/etc/mysql/conf.d/allow_external.cnf":
  owner => mysql,
  group => mysql,
  mode => 0644,
  content => "[mysqld]\n bind-address = 0.0.0.0",
  require => Package["mysql-server"],
  notify => Service["mysql"],
}

# ensure -> que garante que o serviço esteja rodando; 
# enable -> que garante que o serviço rode sempre que o servidor reiniciar; 
# hasstatus e hasrestart -> que declaram que o serviço entende os comandos status e restart
service { "mysql":
  ensure => running,
  enable => true,
  hasstatus => true,
  hasrestart => true,
  require => Package["mysql-server"],
}

#unless -> tenta primeiro esse comando. Caso ele retorne zero o comando principal (command) nao executa
exec { "loja-schema":
  unless => "mysql -uroot loja_schema",
  command => "mysqladmin -uroot create loja_schema",
  path => "/usr/bin/",
  require => Service["mysql"],
}

#onlyif -> executa o comando principal apenas se o codigo de saida do comando de teste for zero.
exec { "remove-anonymous-user":
  command => "mysql -uroot -e \"DELETE FROM mysql.user \
  WHERE user=''; \
  FLUSH PRIVILEGES\"",
  onlyif => "mysql -u' '",
  path => "/usr/bin",
  require => Service["mysql"],
}

exec { "loja-user":
  unless => "mysql -uloja -plojasecret loja_schema",
  command => "mysql -uroot -e \"GRANT ALL PRIVILEGES ON \
  loja_schema.* TO 'loja'@'%' \
  IDENTIFIED BY 'lojasecret';\"",
  path => "/usr/bin/",
  require => Exec["loja-schema"],
}
